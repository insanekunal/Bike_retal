{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/bikes.ts","../../server/routes/auth.ts","../../server/routes/bookings.ts","../../server/routes/maps.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\nimport { BikeSearchRequest, BikeSearchResponse, Bike } from \"@shared/api\";\n\n// Mock bike data\nconst mockBikes: Bike[] = [\n  {\n    id: 1,\n    name: \"Royal Enfield Classic 350\",\n    location: \"Mumbai\",\n    price: 1000,\n    rating: 4.8,\n    image: \"https://cdn.builder.io/api/v1/image/assets%2F51218e8445d94a61bcf324c702b7ca69%2F2bb6b62497af4e0480a47e1815233ea4\",\n    features: [\"350cc\", \"Manual\", \"Petrol\"],\n    available: true,\n    type: \"Cruiser\",\n    brand: \"Royal Enfield\",\n    description: \"Experience the classic charm of Royal Enfield with modern reliability.\",\n    specifications: {\n      engine: \"346cc Single Cylinder\",\n      mileage: \"41 km/l\",\n      fuelCapacity: \"13.5 L\",\n      weight: \"195 kg\"\n    }\n  },\n  {\n    id: 2,\n    name: \"Honda Activa 6G\",\n    location: \"Delhi\",\n    price: 500,\n    rating: 4.6,\n    image: \"https://cdn.builder.io/api/v1/image/assets%2F51218e8445d94a61bcf324c702b7ca69%2Fce42bd7c282447599b4b8037f27383e7\",\n    features: [\"110cc\", \"Automatic\", \"Petrol\"],\n    available: true,\n    type: \"Scooter\",\n    brand: \"Honda\",\n    description: \"Perfect for city commuting with excellent fuel efficiency.\",\n    specifications: {\n      engine: \"109.51cc Air Cooled\",\n      mileage: \"60 km/l\",\n      fuelCapacity: \"5.3 L\",\n      weight: \"109 kg\"\n    }\n  },\n  {\n    id: 3,\n    name: \"KTM Duke 390\",\n    location: \"Bangalore\",\n    price: 1200,\n    rating: 4.9,\n    image: \"https://cdn.builder.io/api/v1/image/assets%2F51218e8445d94a61bcf324c702b7ca69%2F3e65d192410c4554b4119cbdae16e131\",\n    features: [\"390cc\", \"Manual\", \"Petrol\"],\n    available: false,\n    type: \"Sports\",\n    brand: \"KTM\",\n    description: \"Unleash the beast with KTM's performance-oriented street bike.\",\n    specifications: {\n      engine: \"373.2cc Single Cylinder\",\n      mileage: \"25 km/l\",\n      fuelCapacity: \"13.4 L\",\n      weight: \"167 kg\"\n    }\n  },\n  {\n    id: 4,\n    name: \"Bajaj Pulsar N250\",\n    location: \"Chennai\",\n    price: 900,\n    rating: 4.4,\n    image: \"https://cdn.builder.io/api/v1/image/assets%2F51218e8445d94a61bcf324c702b7ca69%2Fed592590e9194d03a33a66d59abcd1fc?format=webp\",\n    features: [\"250cc\", \"Manual\", \"Petrol\"],\n    available: true,\n    type: \"Sports\",\n    brand: \"Bajaj\",\n    description: \"Adventure-ready sports bike with superior performance.\",\n    specifications: {\n      engine: \"250cc DTS-i\",\n      mileage: \"35 km/l\",\n      fuelCapacity: \"14 L\",\n      weight: \"162 kg\"\n    }\n  },\n  {\n    id: 5,\n    name: \"TVS Jupiter\",\n    location: \"Hyderabad\",\n    price: 500,\n    rating: 4.3,\n    image: \"https://cdn.builder.io/api/v1/image/assets%2F51218e8445d94a61bcf324c702b7ca69%2F15dc895e731a410aba9ed54cf0c8c332?format=webp\",\n    features: [\"110cc\", \"Automatic\", \"Petrol\"],\n    available: true,\n    type: \"Scooter\",\n    brand: \"TVS\",\n    description: \"Smooth and comfortable ride for everyday commuting.\",\n    specifications: {\n      engine: \"109.7cc CVTi-REVV\",\n      mileage: \"62 km/l\",\n      fuelCapacity: \"6 L\",\n      weight: \"108 kg\"\n    }\n  },\n  {\n    id: 6,\n    name: \"Hero Splendor Plus\",\n    location: \"Pune\",\n    price: 500,\n    rating: 4.2,\n    image: \"https://cdn.builder.io/o/assets%2F51218e8445d94a61bcf324c702b7ca69%2Fec8f6cdb969b421fb156f72297d7b50b?alt=media&token=fa90e95b-934a-4de2-ad57-acd05df1a4a5&apiKey=51218e8445d94a61bcf324c702b7ca69\",\n    features: [\"97cc\", \"Manual\", \"Petrol\"],\n    available: true,\n    type: \"Commuter\",\n    brand: \"Hero\",\n    description: \"Reliable and economical bike for daily commuting.\",\n    specifications: {\n      engine: \"97.2cc Air Cooled\",\n      mileage: \"70 km/l\",\n      fuelCapacity: \"9.5 L\",\n      weight: \"112 kg\"\n    }\n    \n  }\n];\n\nexport const getBikes: RequestHandler = (req, res) => {\n  const query = req.query as Partial<BikeSearchRequest>;\n  \n  let filteredBikes = [...mockBikes];\n\n  // Apply filters\n  if (query.location && query.location !== 'all') {\n    filteredBikes = filteredBikes.filter(bike => \n      bike.location.toLowerCase().includes(query.location!.toLowerCase())\n    );\n  }\n\n  if (query.type && query.type !== 'all') {\n    filteredBikes = filteredBikes.filter(bike => bike.type === query.type);\n  }\n\n  if (query.brand && query.brand !== 'all') {\n    filteredBikes = filteredBikes.filter(bike => bike.brand === query.brand);\n  }\n\n  if (query.priceMin !== undefined) {\n    filteredBikes = filteredBikes.filter(bike => bike.price >= query.priceMin!);\n  }\n\n  if (query.priceMax !== undefined) {\n    filteredBikes = filteredBikes.filter(bike => bike.price <= query.priceMax!);\n  }\n\n  if (query.available !== undefined) {\n    filteredBikes = filteredBikes.filter(bike => bike.available === query.available);\n  }\n\n  // Apply sorting\n  if (query.sortBy) {\n    filteredBikes.sort((a, b) => {\n      switch (query.sortBy) {\n        case 'price':\n          return a.price - b.price;\n        case 'rating':\n          return b.rating - a.rating;\n        case 'name':\n          return a.name.localeCompare(b.name);\n        default:\n          return 0;\n      }\n    });\n  }\n\n  const response: BikeSearchResponse = {\n    bikes: filteredBikes,\n    total: filteredBikes.length\n  };\n\n  res.json(response);\n};\n\nexport const getBikeById: RequestHandler = (req, res) => {\n  const bikeId = parseInt(req.params.id);\n  const bike = mockBikes.find(b => b.id === bikeId);\n\n  if (!bike) {\n    return res.status(404).json({ message: \"Bike not found\" });\n  }\n\n  res.json(bike);\n};\n\nexport const getFeaturedBikes: RequestHandler = (req, res) => {\n  const featuredBikes = mockBikes.filter(bike => bike.rating >= 4.5).slice(0, 6);\n  res.json(featuredBikes);\n};\n","import { RequestHandler } from \"express\";\nimport { AuthRequest, OTPVerificationRequest, AuthResponse, User } from \"@shared/api\";\n\n// Enhanced user storage with database-like structure\ninterface UserRecord extends User {\n  password?: string;\n  aadharNumber?: string;\n  dlNumber?: string;\n  aadharVerified: boolean;\n  dlVerified: boolean;\n  googleId?: string;\n  firstName?: string;\n  lastName?: string;\n  dateOfBirth?: string;\n  gender?: string;\n}\n\n// Mock database storage\nconst userDatabase: UserRecord[] = [];\nconst otpStorage: { [key: string]: { otp: string; expires: number } } = {};\nconst aadharOtpStorage: { [key: string]: { otp: string; expires: number } } = {};\nconst dlOtpStorage: { [key: string]: { otp: string; expires: number } } = {};\n\n// Generate random OTP\nconst generateOTP = (): string => {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n};\n\n// Hash password (in production, use bcrypt)\nconst hashPassword = (password: string): string => {\n  return Buffer.from(password).toString('base64');\n};\n\n// Verify password\nconst verifyPassword = (password: string, hash: string): boolean => {\n  return Buffer.from(password).toString('base64') === hash;\n};\n\n// Email/Password Login\nexport const loginWithEmail: RequestHandler = (req, res) => {\n  const { email, password } = req.body;\n\n  if (!email || !password) {\n    return res.status(400).json({\n      success: false,\n      message: \"Email and password are required\"\n    } as AuthResponse);\n  }\n\n  const user = userDatabase.find(u => u.email === email);\n  \n  if (!user) {\n    return res.status(404).json({\n      success: false,\n      message: \"Account not found. Please create an account first.\"\n    } as AuthResponse);\n  }\n\n  if (!user.password || !verifyPassword(password, user.password)) {\n    return res.status(401).json({\n      success: false,\n      message: \"Invalid password\"\n    } as AuthResponse);\n  }\n\n  // Generate token\n  const token = Buffer.from(`${user.id}:${email}:${Date.now()}`).toString('base64');\n\n  // Remove sensitive data from response\n  const { password: _, ...userResponse } = user;\n\n  res.json({\n    success: true,\n    message: \"Login successful\",\n    user: userResponse,\n    token\n  } as AuthResponse);\n};\n\n// Complete Signup with verification\nexport const completeSignup: RequestHandler = (req, res) => {\n  const { \n    firstName, lastName, email, phone, password, \n    dateOfBirth, gender, aadharNumber, dlNumber \n  } = req.body;\n\n  if (!firstName || !lastName || !email || !phone || !password) {\n    return res.status(400).json({\n      success: false,\n      message: \"All required fields must be filled\"\n    } as AuthResponse);\n  }\n\n  // Check if user already exists\n  const existingUser = userDatabase.find(u => u.email === email || u.phone === phone);\n  if (existingUser) {\n    return res.status(409).json({\n      success: false,\n      message: \"User already exists with this email or phone\"\n    } as AuthResponse);\n  }\n\n  // Create new user\n  const newUser: UserRecord = {\n    id: userDatabase.length + 1,\n    name: `${firstName} ${lastName}`,\n    firstName,\n    lastName,\n    email,\n    phone,\n    password: hashPassword(password),\n    dateOfBirth,\n    gender,\n    aadharNumber,\n    dlNumber,\n    verified: true,\n    aadharVerified: true,\n    dlVerified: true,\n    createdAt: new Date().toISOString()\n  };\n\n  userDatabase.push(newUser);\n\n  // Generate token\n  const token = Buffer.from(`${newUser.id}:${email}:${Date.now()}`).toString('base64');\n\n  // Remove sensitive data from response\n  const { password: _, ...userResponse } = newUser;\n\n  res.json({\n    success: true,\n    message: \"Account created successfully\",\n    user: userResponse,\n    token\n  } as AuthResponse);\n};\n\n// Aadhar Verification\nexport const verifyAadhar: RequestHandler = (req, res) => {\n  const { aadharNumber } = req.body;\n\n  if (!aadharNumber || aadharNumber.length !== 12) {\n    return res.status(400).json({\n      success: false,\n      message: \"Please provide a valid 12-digit Aadhar number\"\n    });\n  }\n\n  const otp = generateOTP();\n  const expires = Date.now() + 5 * 60 * 1000; // 5 minutes\n\n  aadharOtpStorage[aadharNumber] = { otp, expires };\n\n  // In production, integrate with UIDAI API\n  console.log(`Aadhar OTP for ${aadharNumber}: ${otp}`);\n\n  res.json({\n    success: true,\n    message: \"OTP sent to registered mobile number\",\n    otp // Remove in production\n  });\n};\n\nexport const verifyAadharOTP: RequestHandler = (req, res) => {\n  const { aadharNumber, otp } = req.body;\n\n  if (!aadharNumber || !otp) {\n    return res.status(400).json({\n      success: false,\n      message: \"Aadhar number and OTP are required\"\n    });\n  }\n\n  const storedOTP = aadharOtpStorage[aadharNumber];\n  \n  if (!storedOTP) {\n    return res.status(400).json({\n      success: false,\n      message: \"OTP not found. Please request a new OTP.\"\n    });\n  }\n\n  if (Date.now() > storedOTP.expires) {\n    delete aadharOtpStorage[aadharNumber];\n    return res.status(400).json({\n      success: false,\n      message: \"OTP has expired. Please request a new OTP.\"\n    });\n  }\n\n  if (storedOTP.otp !== otp) {\n    return res.status(400).json({\n      success: false,\n      message: \"Invalid OTP. Please try again.\"\n    });\n  }\n\n  delete aadharOtpStorage[aadharNumber];\n\n  res.json({\n    success: true,\n    message: \"Aadhar verified successfully\"\n  });\n};\n\n// Driving License Verification\nexport const verifyDL: RequestHandler = (req, res) => {\n  const { dlNumber } = req.body;\n\n  if (!dlNumber || dlNumber.length < 10) {\n    return res.status(400).json({\n      success: false,\n      message: \"Please provide a valid driving license number\"\n    });\n  }\n\n  const otp = generateOTP();\n  const expires = Date.now() + 5 * 60 * 1000; // 5 minutes\n\n  dlOtpStorage[dlNumber] = { otp, expires };\n\n  // In production, integrate with RTO API\n  console.log(`DL OTP for ${dlNumber}: ${otp}`);\n\n  res.json({\n    success: true,\n    message: \"OTP sent to registered mobile number\",\n    otp // Remove in production\n  });\n};\n\nexport const verifyDLOTP: RequestHandler = (req, res) => {\n  const { dlNumber, otp } = req.body;\n\n  if (!dlNumber || !otp) {\n    return res.status(400).json({\n      success: false,\n      message: \"Driving license number and OTP are required\"\n    });\n  }\n\n  const storedOTP = dlOtpStorage[dlNumber];\n  \n  if (!storedOTP) {\n    return res.status(400).json({\n      success: false,\n      message: \"OTP not found. Please request a new OTP.\"\n    });\n  }\n\n  if (Date.now() > storedOTP.expires) {\n    delete dlOtpStorage[dlNumber];\n    return res.status(400).json({\n      success: false,\n      message: \"OTP has expired. Please request a new OTP.\"\n    });\n  }\n\n  if (storedOTP.otp !== otp) {\n    return res.status(400).json({\n      success: false,\n      message: \"Invalid OTP. Please try again.\"\n    });\n  }\n\n  delete dlOtpStorage[dlNumber];\n\n  res.json({\n    success: true,\n    message: \"Driving license verified successfully\"\n  });\n};\n\n// Google OAuth handlers (placeholder)\nexport const googleAuth: RequestHandler = (req, res) => {\n  // In production, implement Google OAuth flow\n  res.redirect(`https://accounts.google.com/oauth2/auth?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&response_type=code&scope=email%20profile`);\n};\n\nexport const googleCallback: RequestHandler = (req, res) => {\n  // In production, handle Google OAuth callback\n  const { code } = req.query;\n  \n  // Mock Google user data\n  const googleUser = {\n    id: userDatabase.length + 1,\n    name: \"Google User\",\n    email: \"user@gmail.com\",\n    phone: \"\",\n    verified: true,\n    aadharVerified: false,\n    dlVerified: false,\n    googleId: \"google_user_id\",\n    createdAt: new Date().toISOString()\n  };\n\n  userDatabase.push(googleUser);\n  \n  const token = Buffer.from(`${googleUser.id}:${googleUser.email}:${Date.now()}`).toString('base64');\n  \n  // Redirect to frontend with token\n  res.redirect(`/?token=${token}&user=${encodeURIComponent(JSON.stringify(googleUser))}`);\n};\n\n// Legacy phone OTP methods (keeping for compatibility)\nexport const requestOTP: RequestHandler = (req, res) => {\n  const { phone }: AuthRequest = req.body;\n\n  if (!phone || !/^[6-9]\\d{9}$/.test(phone)) {\n    return res.status(400).json({\n      success: false,\n      message: \"Please provide a valid 10-digit Indian mobile number\"\n    } as AuthResponse);\n  }\n\n  const otp = generateOTP();\n  const expires = Date.now() + 5 * 60 * 1000; // 5 minutes\n\n  otpStorage[phone] = { otp, expires };\n\n  console.log(`OTP for ${phone}: ${otp}`);\n\n  res.json({\n    success: true,\n    message: `OTP sent to ${phone}. For demo purposes, OTP is: ${otp}`\n  } as AuthResponse);\n};\n\nexport const verifyOTP: RequestHandler = (req, res) => {\n  const { phone, otp }: OTPVerificationRequest = req.body;\n\n  if (!phone || !otp) {\n    return res.status(400).json({\n      success: false,\n      message: \"Phone number and OTP are required\"\n    } as AuthResponse);\n  }\n\n  const storedOTP = otpStorage[phone];\n  \n  if (!storedOTP) {\n    return res.status(400).json({\n      success: false,\n      message: \"OTP not found. Please request a new OTP.\"\n    } as AuthResponse);\n  }\n\n  if (Date.now() > storedOTP.expires) {\n    delete otpStorage[phone];\n    return res.status(400).json({\n      success: false,\n      message: \"OTP has expired. Please request a new OTP.\"\n    } as AuthResponse);\n  }\n\n  if (storedOTP.otp !== otp) {\n    return res.status(400).json({\n      success: false,\n      message: \"Invalid OTP. Please try again.\"\n    } as AuthResponse);\n  }\n\n  delete otpStorage[phone];\n\n  let user = userDatabase.find(u => u.phone === phone);\n  \n  if (!user) {\n    user = {\n      id: userDatabase.length + 1,\n      name: `User ${phone}`,\n      email: \"\",\n      phone,\n      verified: true,\n      aadharVerified: false,\n      dlVerified: false,\n      createdAt: new Date().toISOString()\n    };\n    userDatabase.push(user);\n  } else {\n    user.verified = true;\n  }\n\n  const token = Buffer.from(`${user.id}:${phone}:${Date.now()}`).toString('base64');\n\n  res.json({\n    success: true,\n    message: \"Phone number verified successfully\",\n    user,\n    token\n  } as AuthResponse);\n};\n\nexport const getUserProfile: RequestHandler = (req, res) => {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      success: false,\n      message: \"Authorization token required\"\n    });\n  }\n\n  const token = authHeader.substring(7);\n  \n  try {\n    const decoded = Buffer.from(token, 'base64').toString();\n    const [userId] = decoded.split(':');\n    \n    const user = userDatabase.find(u => u.id === parseInt(userId));\n    \n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: \"Invalid token\"\n      });\n    }\n\n    // Remove sensitive data\n    const { password, ...userResponse } = user;\n\n    res.json({\n      success: true,\n      user: userResponse\n    });\n  } catch (error) {\n    res.status(401).json({\n      success: false,\n      message: \"Invalid token\"\n    });\n  }\n};\n\nexport const updateProfile: RequestHandler = (req, res) => {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      success: false,\n      message: \"Authorization token required\"\n    });\n  }\n\n  const token = authHeader.substring(7);\n  \n  try {\n    const decoded = Buffer.from(token, 'base64').toString();\n    const [userId] = decoded.split(':');\n    \n    const user = userDatabase.find(u => u.id === parseInt(userId));\n    \n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: \"Invalid token\"\n      });\n    }\n\n    const { name, email, phone } = req.body;\n    \n    if (name) user.name = name;\n    if (email) user.email = email;\n    if (phone) user.phone = phone;\n\n    // Remove sensitive data\n    const { password, ...userResponse } = user;\n\n    res.json({\n      success: true,\n      message: \"Profile updated successfully\",\n      user: userResponse\n    } as AuthResponse);\n  } catch (error) {\n    res.status(401).json({\n      success: false,\n      message: \"Invalid token\"\n    });\n  }\n};\n\n// Get all users (admin endpoint)\nexport const getAllUsers: RequestHandler = (req, res) => {\n  const usersWithoutPasswords = userDatabase.map(user => {\n    const { password, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  });\n\n  res.json({\n    success: true,\n    users: usersWithoutPasswords,\n    total: usersWithoutPasswords.length\n  });\n};\n","import { RequestHandler } from \"express\";\nimport { BookingRequest, Booking, BookingResponse, PaymentRequest, PaymentResponse } from \"@shared/api\";\n\n// Mock booking storage\nconst mockBookings: Booking[] = [];\n\nexport const createBooking: RequestHandler = (req, res) => {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      success: false,\n      message: \"Authorization token required\"\n    } as BookingResponse);\n  }\n\n  const { bikeId, startDate, endDate, location }: BookingRequest = req.body;\n\n  if (!bikeId || !startDate || !endDate || !location) {\n    return res.status(400).json({\n      success: false,\n      message: \"Missing required booking information\"\n    } as BookingResponse);\n  }\n\n  // Validate dates\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const now = new Date();\n\n  if (start < now) {\n    return res.status(400).json({\n      success: false,\n      message: \"Start date cannot be in the past\"\n    } as BookingResponse);\n  }\n\n  if (end <= start) {\n    return res.status(400).json({\n      success: false,\n      message: \"End date must be after start date\"\n    } as BookingResponse);\n  }\n\n  // Calculate duration and amount (simplified calculation)\n  const durationMs = end.getTime() - start.getTime();\n  const durationDays = Math.ceil(durationMs / (1000 * 60 * 60 * 24));\n  const bikePrice = getBikePriceById(bikeId); // Mock function\n  const totalAmount = durationDays * bikePrice;\n\n  // Extract user ID from token (simplified)\n  const token = authHeader.substring(7);\n  const decoded = Buffer.from(token, 'base64').toString();\n  const [userId] = decoded.split(':');\n\n  const booking: Booking = {\n    id: mockBookings.length + 1,\n    bikeId,\n    userId: parseInt(userId),\n    startDate,\n    endDate,\n    totalAmount,\n    status: 'pending',\n    paymentStatus: 'pending',\n    createdAt: new Date().toISOString()\n  };\n\n  mockBookings.push(booking);\n\n  res.json({\n    success: true,\n    message: \"Booking created successfully\",\n    booking\n  } as BookingResponse);\n};\n\nexport const getUserBookings: RequestHandler = (req, res) => {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      success: false,\n      message: \"Authorization token required\"\n    });\n  }\n\n  const token = authHeader.substring(7);\n  const decoded = Buffer.from(token, 'base64').toString();\n  const [userId] = decoded.split(':');\n\n  const userBookings = mockBookings.filter(b => b.userId === parseInt(userId));\n\n  res.json({\n    success: true,\n    bookings: userBookings\n  });\n};\n\nexport const getBookingById: RequestHandler = (req, res) => {\n  const bookingId = parseInt(req.params.id);\n  const booking = mockBookings.find(b => b.id === bookingId);\n\n  if (!booking) {\n    return res.status(404).json({\n      success: false,\n      message: \"Booking not found\"\n    });\n  }\n\n  res.json({\n    success: true,\n    booking\n  });\n};\n\nexport const cancelBooking: RequestHandler = (req, res) => {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      success: false,\n      message: \"Authorization token required\"\n    });\n  }\n\n  const bookingId = parseInt(req.params.id);\n  const booking = mockBookings.find(b => b.id === bookingId);\n\n  if (!booking) {\n    return res.status(404).json({\n      success: false,\n      message: \"Booking not found\"\n    } as BookingResponse);\n  }\n\n  const token = authHeader.substring(7);\n  const decoded = Buffer.from(token, 'base64').toString();\n  const [userId] = decoded.split(':');\n\n  if (booking.userId !== parseInt(userId)) {\n    return res.status(403).json({\n      success: false,\n      message: \"Not authorized to cancel this booking\"\n    } as BookingResponse);\n  }\n\n  booking.status = 'cancelled';\n\n  res.json({\n    success: true,\n    message: \"Booking cancelled successfully\",\n    booking\n  } as BookingResponse);\n};\n\nexport const processPayment: RequestHandler = (req, res) => {\n  const { bookingId, amount, paymentMethod }: PaymentRequest = req.body;\n\n  if (!bookingId || !amount || !paymentMethod) {\n    return res.status(400).json({\n      success: false,\n      message: \"Missing payment information\"\n    } as PaymentResponse);\n  }\n\n  const booking = mockBookings.find(b => b.id === bookingId);\n\n  if (!booking) {\n    return res.status(404).json({\n      success: false,\n      message: \"Booking not found\"\n    } as PaymentResponse);\n  }\n\n  if (booking.paymentStatus === 'paid') {\n    return res.status(400).json({\n      success: false,\n      message: \"Payment already completed\"\n    } as PaymentResponse);\n  }\n\n  // Simulate payment processing\n  const paymentId = `pay_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  // Update booking status\n  booking.paymentStatus = 'paid';\n  booking.status = 'confirmed';\n\n  res.json({\n    success: true,\n    message: \"Payment processed successfully\",\n    paymentId\n  } as PaymentResponse);\n};\n\n// Helper function to get bike price (mock)\nfunction getBikePriceById(bikeId: number): number {\n  const bikePrices: { [key: number]: number } = {\n    1: 1000, // Royal Enfield Classic 350\n    2: 500, // Honda Activa 6G\n    3: 1200, // KTM Duke 390\n    4: 900, // Bajaj Pulsar N250\n    5: 500, // TVS Jupiter\n    6: 500  // Hero Splendor Plus\n  };\n\n  return bikePrices[bikeId] || 500; // Default price\n}\n","import { RequestHandler } from \"express\";\nimport { LocationAvailability, MapDataResponse } from \"@shared/api\";\n\n// Mock location data with Indian cities\nconst mockLocationData: LocationAvailability[] = [\n  {\n    city: \"Mumbai\",\n    state: \"Maharashtra\",\n    coordinates: { lat: 19.0760, lng: 72.8777 },\n    availableBikes: 120,\n    totalBikes: 150,\n    popularBikes: [\"Royal Enfield Classic 350\", \"Honda Activa 6G\", \"KTM Duke 390\"]\n  },\n  {\n    city: \"Delhi\",\n    state: \"Delhi\",\n    coordinates: { lat: 28.6139, lng: 77.2090 },\n    availableBikes: 95,\n    totalBikes: 120,\n    popularBikes: [\"Honda Activa 6G\", \"Hero Splendor Plus\", \"Bajaj Pulsar 220F\"]\n  },\n  {\n    city: \"Bangalore\",\n    state: \"Karnataka\",\n    coordinates: { lat: 12.9716, lng: 77.5946 },\n    availableBikes: 80,\n    totalBikes: 100,\n    popularBikes: [\"KTM Duke 390\", \"Royal Enfield Classic 350\", \"TVS Jupiter\"]\n  },\n  {\n    city: \"Chennai\",\n    state: \"Tamil Nadu\",\n    coordinates: { lat: 13.0827, lng: 80.2707 },\n    availableBikes: 65,\n    totalBikes: 80,\n    popularBikes: [\"Bajaj Pulsar 220F\", \"Honda Activa 6G\", \"TVS Jupiter\"]\n  },\n  {\n    city: \"Hyderabad\",\n    state: \"Telangana\",\n    coordinates: { lat: 17.3850, lng: 78.4867 },\n    availableBikes: 70,\n    totalBikes: 90,\n    popularBikes: [\"TVS Jupiter\", \"Hero Splendor Plus\", \"Royal Enfield Classic 350\"]\n  },\n  {\n    city: \"Pune\",\n    state: \"Maharashtra\",\n    coordinates: { lat: 18.5204, lng: 73.8567 },\n    availableBikes: 55,\n    totalBikes: 70,\n    popularBikes: [\"Hero Splendor Plus\", \"Honda Activa 6G\", \"KTM Duke 390\"]\n  },\n  {\n    city: \"Kolkata\",\n    state: \"West Bengal\",\n    coordinates: { lat: 22.5726, lng: 88.3639 },\n    availableBikes: 45,\n    totalBikes: 60,\n    popularBikes: [\"Honda Activa 6G\", \"Hero Splendor Plus\", \"TVS Jupiter\"]\n  },\n  {\n    city: \"Ahmedabad\",\n    state: \"Gujarat\",\n    coordinates: { lat: 23.0225, lng: 72.5714 },\n    availableBikes: 40,\n    totalBikes: 55,\n    popularBikes: [\"Hero Splendor Plus\", \"Bajaj Pulsar 220F\", \"Honda Activa 6G\"]\n  },\n  {\n    city: \"Jaipur\",\n    state: \"Rajasthan\",\n    coordinates: { lat: 26.9124, lng: 75.7873 },\n    availableBikes: 35,\n    totalBikes: 45,\n    popularBikes: [\"Royal Enfield Classic 350\", \"Hero Splendor Plus\", \"Honda Activa 6G\"]\n  },\n  {\n    city: \"Kochi\",\n    state: \"Kerala\",\n    coordinates: { lat: 9.9312, lng: 76.2673 },\n    availableBikes: 30,\n    totalBikes: 40,\n    popularBikes: [\"Honda Activa 6G\", \"TVS Jupiter\", \"Hero Splendor Plus\"]\n  },\n  {\n    city: \"Goa\",\n    state: \"Goa\",\n    coordinates: { lat: 15.2993, lng: 74.1240 },\n    availableBikes: 50,\n    totalBikes: 65,\n    popularBikes: [\"Royal Enfield Classic 350\", \"KTM Duke 390\", \"Honda Activa 6G\"]\n  },\n  {\n    city: \"Chandigarh\",\n    state: \"Punjab\",\n    coordinates: { lat: 30.7333, lng: 76.7794 },\n    availableBikes: 25,\n    totalBikes: 35,\n    popularBikes: [\"Hero Splendor Plus\", \"Bajaj Pulsar 220F\", \"Honda Activa 6G\"]\n  }\n];\n\nexport const getMapData: RequestHandler = (req, res) => {\n  // Simulate some dynamic availability changes\n  const responseData = mockLocationData.map(location => ({\n    ...location,\n    availableBikes: Math.max(0, location.availableBikes - Math.floor(Math.random() * 10))\n  }));\n\n  const response: MapDataResponse = {\n    locations: responseData\n  };\n\n  res.json(response);\n};\n\nexport const getLocationData: RequestHandler = (req, res) => {\n  const { city } = req.params;\n  \n  const location = mockLocationData.find(loc => \n    loc.city.toLowerCase() === city.toLowerCase()\n  );\n\n  if (!location) {\n    return res.status(404).json({\n      success: false,\n      message: \"Location not found\"\n    });\n  }\n\n  res.json({\n    success: true,\n    location\n  });\n};\n\nexport const searchNearbyLocations: RequestHandler = (req, res) => {\n  const { lat, lng, radius = 100 } = req.query;\n\n  if (!lat || !lng) {\n    return res.status(400).json({\n      success: false,\n      message: \"Latitude and longitude are required\"\n    });\n  }\n\n  const userLat = parseFloat(lat as string);\n  const userLng = parseFloat(lng as string);\n  const searchRadius = parseFloat(radius as string);\n\n  // Simple distance calculation (Haversine formula simplified)\n  const nearbyLocations = mockLocationData.filter(location => {\n    const distance = calculateDistance(\n      userLat, userLng,\n      location.coordinates.lat, location.coordinates.lng\n    );\n    return distance <= searchRadius;\n  }).sort((a, b) => {\n    const distanceA = calculateDistance(userLat, userLng, a.coordinates.lat, a.coordinates.lng);\n    const distanceB = calculateDistance(userLat, userLng, b.coordinates.lat, b.coordinates.lng);\n    return distanceA - distanceB;\n  });\n\n  res.json({\n    success: true,\n    locations: nearbyLocations\n  });\n};\n\n// Helper function to calculate distance between two coordinates\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\n\n// Import bike rental API routes\nimport { getBikes, getBikeById, getFeaturedBikes } from \"./routes/bikes\";\nimport {\n  requestOTP, verifyOTP, getUserProfile, updateProfile,\n  loginWithEmail, completeSignup, verifyAadhar, verifyAadharOTP,\n  verifyDL, verifyDLOTP, googleAuth, googleCallback, getAllUsers\n} from \"./routes/auth\";\nimport { createBooking, getUserBookings, getBookingById, cancelBooking, processPayment } from \"./routes/bookings\";\nimport { getMapData, getLocationData, searchNearbyLocations } from \"./routes/maps\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Health check routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Bike routes\n  app.get(\"/api/bikes\", getBikes);\n  app.get(\"/api/bikes/featured\", getFeaturedBikes);\n  app.get(\"/api/bikes/:id\", getBikeById);\n\n  // Authentication routes\n  app.post(\"/api/auth/request-otp\", requestOTP);\n  app.post(\"/api/auth/verify-otp\", verifyOTP);\n  app.post(\"/api/auth/login\", loginWithEmail);\n  app.post(\"/api/auth/signup\", completeSignup);\n  app.post(\"/api/auth/verify-aadhar\", verifyAadhar);\n  app.post(\"/api/auth/verify-aadhar-otp\", verifyAadharOTP);\n  app.post(\"/api/auth/verify-dl\", verifyDL);\n  app.post(\"/api/auth/verify-dl-otp\", verifyDLOTP);\n  app.get(\"/api/auth/google\", googleAuth);\n  app.get(\"/api/auth/google/callback\", googleCallback);\n  app.get(\"/api/auth/users\", getAllUsers);\n  app.get(\"/api/auth/profile\", getUserProfile);\n  app.put(\"/api/auth/profile\", updateProfile);\n\n  // Booking routes\n  app.post(\"/api/bookings\", createBooking);\n  app.get(\"/api/bookings\", getUserBookings);\n  app.get(\"/api/bookings/:id\", getBookingById);\n  app.delete(\"/api/bookings/:id\", cancelBooking);\n\n  // Payment routes\n  app.post(\"/api/payments\", processPayment);\n\n  // Map and location routes\n  app.get(\"/api/map/data\", getMapData);\n  app.get(\"/api/map/location/:city\", getLocationData);\n  app.get(\"/api/map/nearby\", searchNearbyLocations);\n\n  // Contact form route\n  app.post(\"/api/contact\", (req, res) => {\n    const { name, email, phone, subject, category, message } = req.body;\n\n    if (!name || !email || !subject || !category || !message) {\n      return res.status(400).json({\n        success: false,\n        message: \"All required fields must be filled\"\n      });\n    }\n\n    // In production, save to database and send email\n    console.log('Contact form submission:', { name, email, phone, subject, category, message });\n\n    res.json({\n      success: true,\n      message: \"Thank you for your message. We'll get back to you soon!\"\n    });\n  });\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":";;;;;AAGa,MAAA,aAA6B,CAAC,KAAK,QAAQ;AACtD,QAAM,WAAyB;AAAA,IAC7B,SAAS;AAAA,EACX;AACA,MAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAC/B;ACJA,MAAM,YAAoB;AAAA,EACxB;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU,CAAC,SAAS,UAAU,QAAQ;AAAA,IACtC,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,gBAAgB;AAAA,MACd,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,MACd,QAAQ;AAAA,IAAA;AAAA,EAEZ;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU,CAAC,SAAS,aAAa,QAAQ;AAAA,IACzC,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,gBAAgB;AAAA,MACd,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,MACd,QAAQ;AAAA,IAAA;AAAA,EAEZ;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU,CAAC,SAAS,UAAU,QAAQ;AAAA,IACtC,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,gBAAgB;AAAA,MACd,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,MACd,QAAQ;AAAA,IAAA;AAAA,EAEZ;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU,CAAC,SAAS,UAAU,QAAQ;AAAA,IACtC,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,gBAAgB;AAAA,MACd,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,MACd,QAAQ;AAAA,IAAA;AAAA,EAEZ;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU,CAAC,SAAS,aAAa,QAAQ;AAAA,IACzC,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,gBAAgB;AAAA,MACd,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,MACd,QAAQ;AAAA,IAAA;AAAA,EAEZ;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU,CAAC,QAAQ,UAAU,QAAQ;AAAA,IACrC,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,gBAAgB;AAAA,MACd,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,MACd,QAAQ;AAAA,IAAA;AAAA,EACV;AAGJ;AAEa,MAAA,WAA2B,CAAC,KAAK,QAAQ;AACpD,QAAM,QAAQ,IAAI;AAEd,MAAA,gBAAgB,CAAC,GAAG,SAAS;AAGjC,MAAI,MAAM,YAAY,MAAM,aAAa,OAAO;AAC9C,oBAAgB,cAAc;AAAA,MAAO,CAAA,SACnC,KAAK,SAAS,cAAc,SAAS,MAAM,SAAU,YAAa,CAAA;AAAA,IACpE;AAAA,EAAA;AAGF,MAAI,MAAM,QAAQ,MAAM,SAAS,OAAO;AACtC,oBAAgB,cAAc,OAAO,CAAA,SAAQ,KAAK,SAAS,MAAM,IAAI;AAAA,EAAA;AAGvE,MAAI,MAAM,SAAS,MAAM,UAAU,OAAO;AACxC,oBAAgB,cAAc,OAAO,CAAA,SAAQ,KAAK,UAAU,MAAM,KAAK;AAAA,EAAA;AAGrE,MAAA,MAAM,aAAa,QAAW;AAChC,oBAAgB,cAAc,OAAO,CAAA,SAAQ,KAAK,SAAS,MAAM,QAAS;AAAA,EAAA;AAGxE,MAAA,MAAM,aAAa,QAAW;AAChC,oBAAgB,cAAc,OAAO,CAAA,SAAQ,KAAK,SAAS,MAAM,QAAS;AAAA,EAAA;AAGxE,MAAA,MAAM,cAAc,QAAW;AACjC,oBAAgB,cAAc,OAAO,CAAA,SAAQ,KAAK,cAAc,MAAM,SAAS;AAAA,EAAA;AAIjF,MAAI,MAAM,QAAQ;AACF,kBAAA,KAAK,CAAC,GAAG,MAAM;AAC3B,cAAQ,MAAM,QAAQ;AAAA,QACpB,KAAK;AACI,iBAAA,EAAE,QAAQ,EAAE;AAAA,QACrB,KAAK;AACI,iBAAA,EAAE,SAAS,EAAE;AAAA,QACtB,KAAK;AACH,iBAAO,EAAE,KAAK,cAAc,EAAE,IAAI;AAAA,QACpC;AACS,iBAAA;AAAA,MAAA;AAAA,IACX,CACD;AAAA,EAAA;AAGH,QAAM,WAA+B;AAAA,IACnC,OAAO;AAAA,IACP,OAAO,cAAc;AAAA,EACvB;AAEA,MAAI,KAAK,QAAQ;AACnB;AAEa,MAAA,cAA8B,CAAC,KAAK,QAAQ;AACvD,QAAM,SAAS,SAAS,IAAI,OAAO,EAAE;AACrC,QAAM,OAAO,UAAU,KAAK,CAAK,MAAA,EAAE,OAAO,MAAM;AAEhD,MAAI,CAAC,MAAM;AACF,WAAA,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,kBAAkB;AAAA,EAAA;AAG3D,MAAI,KAAK,IAAI;AACf;AAEa,MAAA,mBAAmC,CAAC,KAAK,QAAQ;AACtD,QAAA,gBAAgB,UAAU,OAAO,CAAQ,SAAA,KAAK,UAAU,GAAG,EAAE,MAAM,GAAG,CAAC;AAC7E,MAAI,KAAK,aAAa;AACxB;AC9KA,MAAM,eAA6B,CAAC;AACpC,MAAM,aAAkE,CAAC;AACzE,MAAM,mBAAwE,CAAC;AAC/E,MAAM,eAAoE,CAAC;AAG3E,MAAM,cAAc,MAAc;AACzB,SAAA,KAAK,MAAM,MAAS,KAAK,WAAW,GAAM,EAAE,SAAS;AAC9D;AAGA,MAAM,eAAe,CAAC,aAA6B;AACjD,SAAO,OAAO,KAAK,QAAQ,EAAE,SAAS,QAAQ;AAChD;AAGA,MAAM,iBAAiB,CAAC,UAAkB,SAA0B;AAClE,SAAO,OAAO,KAAK,QAAQ,EAAE,SAAS,QAAQ,MAAM;AACtD;AAGa,MAAA,iBAAiC,CAAC,KAAK,QAAQ;AAC1D,QAAM,EAAE,OAAO,SAAS,IAAI,IAAI;AAE5B,MAAA,CAAC,SAAS,CAAC,UAAU;AACvB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAGnB,QAAM,OAAO,aAAa,KAAK,CAAK,MAAA,EAAE,UAAU,KAAK;AAErD,MAAI,CAAC,MAAM;AACT,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAGf,MAAA,CAAC,KAAK,YAAY,CAAC,eAAe,UAAU,KAAK,QAAQ,GAAG;AAC9D,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAInB,QAAM,QAAQ,OAAO,KAAK,GAAG,KAAK,EAAE,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,SAAS,QAAQ;AAGhF,QAAM,EAAE,UAAU,GAAG,GAAG,aAAiB,IAAA;AAEzC,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT,MAAM;AAAA,IACN;AAAA,EAAA,CACe;AACnB;AAGa,MAAA,iBAAiC,CAAC,KAAK,QAAQ;AACpD,QAAA;AAAA,IACJ;AAAA,IAAW;AAAA,IAAU;AAAA,IAAO;AAAA,IAAO;AAAA,IACnC;AAAA,IAAa;AAAA,IAAQ;AAAA,IAAc;AAAA,MACjC,IAAI;AAEJ,MAAA,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU;AAC5D,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAIb,QAAA,eAAe,aAAa,KAAK,CAAA,MAAK,EAAE,UAAU,SAAS,EAAE,UAAU,KAAK;AAClF,MAAI,cAAc;AAChB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAInB,QAAM,UAAsB;AAAA,IAC1B,IAAI,aAAa,SAAS;AAAA,IAC1B,MAAM,GAAG,SAAS,IAAI,QAAQ;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,aAAa,QAAQ;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,EACpC;AAEA,eAAa,KAAK,OAAO;AAGzB,QAAM,QAAQ,OAAO,KAAK,GAAG,QAAQ,EAAE,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,SAAS,QAAQ;AAGnF,QAAM,EAAE,UAAU,GAAG,GAAG,aAAiB,IAAA;AAEzC,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT,MAAM;AAAA,IACN;AAAA,EAAA,CACe;AACnB;AAGa,MAAA,eAA+B,CAAC,KAAK,QAAQ;AAClD,QAAA,EAAE,iBAAiB,IAAI;AAE7B,MAAI,CAAC,gBAAgB,aAAa,WAAW,IAAI;AAC/C,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,QAAM,MAAM,YAAY;AACxB,QAAM,UAAU,KAAK,IAAI,IAAI,IAAI,KAAK;AAEtC,mBAAiB,YAAY,IAAI,EAAE,KAAK,QAAQ;AAGhD,UAAQ,IAAI,kBAAkB,YAAY,KAAK,GAAG,EAAE;AAEpD,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA;AAAA,EAAA,CACD;AACH;AAEa,MAAA,kBAAkC,CAAC,KAAK,QAAQ;AAC3D,QAAM,EAAE,cAAc,IAAI,IAAI,IAAI;AAE9B,MAAA,CAAC,gBAAgB,CAAC,KAAK;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGG,QAAA,YAAY,iBAAiB,YAAY;AAE/C,MAAI,CAAC,WAAW;AACd,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,MAAI,KAAK,QAAQ,UAAU,SAAS;AAClC,WAAO,iBAAiB,YAAY;AACpC,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGC,MAAA,UAAU,QAAQ,KAAK;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,SAAO,iBAAiB,YAAY;AAEpC,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,EAAA,CACV;AACH;AAGa,MAAA,WAA2B,CAAC,KAAK,QAAQ;AAC9C,QAAA,EAAE,aAAa,IAAI;AAEzB,MAAI,CAAC,YAAY,SAAS,SAAS,IAAI;AACrC,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,QAAM,MAAM,YAAY;AACxB,QAAM,UAAU,KAAK,IAAI,IAAI,IAAI,KAAK;AAEtC,eAAa,QAAQ,IAAI,EAAE,KAAK,QAAQ;AAGxC,UAAQ,IAAI,cAAc,QAAQ,KAAK,GAAG,EAAE;AAE5C,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA;AAAA,EAAA,CACD;AACH;AAEa,MAAA,cAA8B,CAAC,KAAK,QAAQ;AACvD,QAAM,EAAE,UAAU,IAAI,IAAI,IAAI;AAE1B,MAAA,CAAC,YAAY,CAAC,KAAK;AACrB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGG,QAAA,YAAY,aAAa,QAAQ;AAEvC,MAAI,CAAC,WAAW;AACd,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,MAAI,KAAK,QAAQ,UAAU,SAAS;AAClC,WAAO,aAAa,QAAQ;AAC5B,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGC,MAAA,UAAU,QAAQ,KAAK;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,SAAO,aAAa,QAAQ;AAE5B,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,EAAA,CACV;AACH;AAGa,MAAA,aAA6B,CAAC,KAAK,QAAQ;AAEtD,MAAI,SAAS,0IAA0I;AACzJ;AAEa,MAAA,iBAAiC,CAAC,KAAK,QAAQ;AAEpD,QAAA,EAAE,SAAS,IAAI;AAGrB,QAAM,aAAa;AAAA,IACjB,IAAI,aAAa,SAAS;AAAA,IAC1B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,UAAU;AAAA,IACV,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,EACpC;AAEA,eAAa,KAAK,UAAU;AAE5B,QAAM,QAAQ,OAAO,KAAK,GAAG,WAAW,EAAE,IAAI,WAAW,KAAK,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,SAAS,QAAQ;AAG7F,MAAA,SAAS,WAAW,KAAK,SAAS,mBAAmB,KAAK,UAAU,UAAU,CAAC,CAAC,EAAE;AACxF;AAGa,MAAA,aAA6B,CAAC,KAAK,QAAQ;AAChD,QAAA,EAAE,UAAuB,IAAI;AAEnC,MAAI,CAAC,SAAS,CAAC,eAAe,KAAK,KAAK,GAAG;AACzC,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAGnB,QAAM,MAAM,YAAY;AACxB,QAAM,UAAU,KAAK,IAAI,IAAI,IAAI,KAAK;AAEtC,aAAW,KAAK,IAAI,EAAE,KAAK,QAAQ;AAEnC,UAAQ,IAAI,WAAW,KAAK,KAAK,GAAG,EAAE;AAEtC,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS,eAAe,KAAK,gCAAgC,GAAG;AAAA,EAAA,CACjD;AACnB;AAEa,MAAA,YAA4B,CAAC,KAAK,QAAQ;AACrD,QAAM,EAAE,OAAO,IAAI,IAA4B,IAAI;AAE/C,MAAA,CAAC,SAAS,CAAC,KAAK;AAClB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAGb,QAAA,YAAY,WAAW,KAAK;AAElC,MAAI,CAAC,WAAW;AACd,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAGnB,MAAI,KAAK,QAAQ,UAAU,SAAS;AAClC,WAAO,WAAW,KAAK;AACvB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAGf,MAAA,UAAU,QAAQ,KAAK;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACM;AAAA,EAAA;AAGnB,SAAO,WAAW,KAAK;AAEvB,MAAI,OAAO,aAAa,KAAK,CAAK,MAAA,EAAE,UAAU,KAAK;AAEnD,MAAI,CAAC,MAAM;AACF,WAAA;AAAA,MACL,IAAI,aAAa,SAAS;AAAA,MAC1B,MAAM,QAAQ,KAAK;AAAA,MACnB,OAAO;AAAA,MACP;AAAA,MACA,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,YAAY;AAAA,MACZ,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IACpC;AACA,iBAAa,KAAK,IAAI;AAAA,EAAA,OACjB;AACL,SAAK,WAAW;AAAA,EAAA;AAGlB,QAAM,QAAQ,OAAO,KAAK,GAAG,KAAK,EAAE,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,SAAS,QAAQ;AAEhF,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA,IACA;AAAA,EAAA,CACe;AACnB;AAEa,MAAA,iBAAiC,CAAC,KAAK,QAAQ;AACpD,QAAA,aAAa,IAAI,QAAQ;AAE/B,MAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGG,QAAA,QAAQ,WAAW,UAAU,CAAC;AAEhC,MAAA;AACF,UAAM,UAAU,OAAO,KAAK,OAAO,QAAQ,EAAE,SAAS;AACtD,UAAM,CAAC,MAAM,IAAI,QAAQ,MAAM,GAAG;AAE5B,UAAA,OAAO,aAAa,KAAK,CAAA,MAAK,EAAE,OAAO,SAAS,MAAM,CAAC;AAE7D,QAAI,CAAC,MAAM;AACT,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,QACT,SAAS;AAAA,MAAA,CACV;AAAA,IAAA;AAIH,UAAM,EAAE,UAAU,GAAG,aAAA,IAAiB;AAEtC,QAAI,KAAK;AAAA,MACP,SAAS;AAAA,MACT,MAAM;AAAA,IAAA,CACP;AAAA,WACM,OAAO;AACV,QAAA,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAEL;AAEa,MAAA,gBAAgC,CAAC,KAAK,QAAQ;AACnD,QAAA,aAAa,IAAI,QAAQ;AAE/B,MAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGG,QAAA,QAAQ,WAAW,UAAU,CAAC;AAEhC,MAAA;AACF,UAAM,UAAU,OAAO,KAAK,OAAO,QAAQ,EAAE,SAAS;AACtD,UAAM,CAAC,MAAM,IAAI,QAAQ,MAAM,GAAG;AAE5B,UAAA,OAAO,aAAa,KAAK,CAAA,MAAK,EAAE,OAAO,SAAS,MAAM,CAAC;AAE7D,QAAI,CAAC,MAAM;AACT,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,QACT,SAAS;AAAA,MAAA,CACV;AAAA,IAAA;AAGH,UAAM,EAAE,MAAM,OAAO,UAAU,IAAI;AAE/B,QAAA,WAAW,OAAO;AAClB,QAAA,YAAY,QAAQ;AACpB,QAAA,YAAY,QAAQ;AAGxB,UAAM,EAAE,UAAU,GAAG,aAAA,IAAiB;AAEtC,QAAI,KAAK;AAAA,MACP,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,IAAA,CACS;AAAA,WACV,OAAO;AACV,QAAA,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAEL;AAGa,MAAA,cAA8B,CAAC,KAAK,QAAQ;AACjD,QAAA,wBAAwB,aAAa,IAAI,CAAQ,SAAA;AACrD,UAAM,EAAE,UAAU,GAAG,oBAAA,IAAwB;AACtC,WAAA;AAAA,EAAA,CACR;AAED,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO,sBAAsB;AAAA,EAAA,CAC9B;AACH;ACveA,MAAM,eAA0B,CAAC;AAEpB,MAAA,gBAAgC,CAAC,KAAK,QAAQ;AACnD,QAAA,aAAa,IAAI,QAAQ;AAE/B,MAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAGtB,QAAM,EAAE,QAAQ,WAAW,SAAS,SAAA,IAA6B,IAAI;AAErE,MAAI,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU;AAClD,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAIhB,QAAA,QAAQ,IAAI,KAAK,SAAS;AAC1B,QAAA,MAAM,IAAI,KAAK,OAAO;AACtB,QAAA,0BAAU,KAAK;AAErB,MAAI,QAAQ,KAAK;AACf,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAGtB,MAAI,OAAO,OAAO;AAChB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAItB,QAAM,aAAa,IAAI,QAAQ,IAAI,MAAM,QAAQ;AACjD,QAAM,eAAe,KAAK,KAAK,cAAc,MAAO,KAAK,KAAK,GAAG;AAC3D,QAAA,YAAY,iBAAiB,MAAM;AACzC,QAAM,cAAc,eAAe;AAG7B,QAAA,QAAQ,WAAW,UAAU,CAAC;AACpC,QAAM,UAAU,OAAO,KAAK,OAAO,QAAQ,EAAE,SAAS;AACtD,QAAM,CAAC,MAAM,IAAI,QAAQ,MAAM,GAAG;AAElC,QAAM,UAAmB;AAAA,IACvB,IAAI,aAAa,SAAS;AAAA,IAC1B;AAAA,IACA,QAAQ,SAAS,MAAM;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,EACpC;AAEA,eAAa,KAAK,OAAO;AAEzB,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA,EAAA,CACkB;AACtB;AAEa,MAAA,kBAAkC,CAAC,KAAK,QAAQ;AACrD,QAAA,aAAa,IAAI,QAAQ;AAE/B,MAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGG,QAAA,QAAQ,WAAW,UAAU,CAAC;AACpC,QAAM,UAAU,OAAO,KAAK,OAAO,QAAQ,EAAE,SAAS;AACtD,QAAM,CAAC,MAAM,IAAI,QAAQ,MAAM,GAAG;AAE5B,QAAA,eAAe,aAAa,OAAO,CAAA,MAAK,EAAE,WAAW,SAAS,MAAM,CAAC;AAE3E,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,UAAU;AAAA,EAAA,CACX;AACH;AAEa,MAAA,iBAAiC,CAAC,KAAK,QAAQ;AAC1D,QAAM,YAAY,SAAS,IAAI,OAAO,EAAE;AACxC,QAAM,UAAU,aAAa,KAAK,CAAK,MAAA,EAAE,OAAO,SAAS;AAEzD,MAAI,CAAC,SAAS;AACZ,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT;AAAA,EAAA,CACD;AACH;AAEa,MAAA,gBAAgC,CAAC,KAAK,QAAQ;AACnD,QAAA,aAAa,IAAI,QAAQ;AAE/B,MAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,QAAM,YAAY,SAAS,IAAI,OAAO,EAAE;AACxC,QAAM,UAAU,aAAa,KAAK,CAAK,MAAA,EAAE,OAAO,SAAS;AAEzD,MAAI,CAAC,SAAS;AACZ,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAGhB,QAAA,QAAQ,WAAW,UAAU,CAAC;AACpC,QAAM,UAAU,OAAO,KAAK,OAAO,QAAQ,EAAE,SAAS;AACtD,QAAM,CAAC,MAAM,IAAI,QAAQ,MAAM,GAAG;AAElC,MAAI,QAAQ,WAAW,SAAS,MAAM,GAAG;AACvC,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAGtB,UAAQ,SAAS;AAEjB,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA,EAAA,CACkB;AACtB;AAEa,MAAA,iBAAiC,CAAC,KAAK,QAAQ;AAC1D,QAAM,EAAE,WAAW,QAAQ,kBAAkC,IAAI;AAEjE,MAAI,CAAC,aAAa,CAAC,UAAU,CAAC,eAAe;AAC3C,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAGtB,QAAM,UAAU,aAAa,KAAK,CAAK,MAAA,EAAE,OAAO,SAAS;AAEzD,MAAI,CAAC,SAAS;AACZ,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAGlB,MAAA,QAAQ,kBAAkB,QAAQ;AACpC,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACS;AAAA,EAAA;AAItB,QAAM,YAAY,OAAO,KAAK,IAAA,CAAK,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAG9E,UAAQ,gBAAgB;AACxB,UAAQ,SAAS;AAEjB,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA,EAAA,CACkB;AACtB;AAGA,SAAS,iBAAiB,QAAwB;AAChD,QAAM,aAAwC;AAAA,IAC5C,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,EACL;AAEO,SAAA,WAAW,MAAM,KAAK;AAC/B;AC3MA,MAAM,mBAA2C;AAAA,EAC/C;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,QAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,6BAA6B,mBAAmB,cAAc;AAAA,EAC/E;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,OAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,mBAAmB,sBAAsB,mBAAmB;AAAA,EAC7E;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,gBAAgB,6BAA6B,aAAa;AAAA,EAC3E;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,qBAAqB,mBAAmB,aAAa;AAAA,EACtE;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,QAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,eAAe,sBAAsB,2BAA2B;AAAA,EACjF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,sBAAsB,mBAAmB,cAAc;AAAA,EACxE;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,mBAAmB,sBAAsB,aAAa;AAAA,EACvE;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,sBAAsB,qBAAqB,iBAAiB;AAAA,EAC7E;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,6BAA6B,sBAAsB,iBAAiB;AAAA,EACrF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,QAAQ,KAAK,QAAQ;AAAA,IACzC,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,mBAAmB,eAAe,oBAAoB;AAAA,EACvE;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,OAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,6BAA6B,gBAAgB,iBAAiB;AAAA,EAC/E;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC1C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc,CAAC,sBAAsB,qBAAqB,iBAAiB;AAAA,EAAA;AAE/E;AAEa,MAAA,aAA6B,CAAC,KAAK,QAAQ;AAEhD,QAAA,eAAe,iBAAiB,IAAI,CAAa,cAAA;AAAA,IACrD,GAAG;AAAA,IACH,gBAAgB,KAAK,IAAI,GAAG,SAAS,iBAAiB,KAAK,MAAM,KAAK,OAAA,IAAW,EAAE,CAAC;AAAA,EAAA,EACpF;AAEF,QAAM,WAA4B;AAAA,IAChC,WAAW;AAAA,EACb;AAEA,MAAI,KAAK,QAAQ;AACnB;AAEa,MAAA,kBAAkC,CAAC,KAAK,QAAQ;AACrD,QAAA,EAAE,SAAS,IAAI;AAErB,QAAM,WAAW,iBAAiB;AAAA,IAAK,SACrC,IAAI,KAAK,YAAY,MAAM,KAAK,YAAY;AAAA,EAC9C;AAEA,MAAI,CAAC,UAAU;AACb,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT;AAAA,EAAA,CACD;AACH;AAEa,MAAA,wBAAwC,CAAC,KAAK,QAAQ;AACjE,QAAM,EAAE,KAAK,KAAK,SAAS,IAAA,IAAQ,IAAI;AAEnC,MAAA,CAAC,OAAO,CAAC,KAAK;AAChB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGG,QAAA,UAAU,WAAW,GAAa;AAClC,QAAA,UAAU,WAAW,GAAa;AAClC,QAAA,eAAe,WAAW,MAAgB;AAG1C,QAAA,kBAAkB,iBAAiB,OAAO,CAAY,aAAA;AAC1D,UAAM,WAAW;AAAA,MACf;AAAA,MAAS;AAAA,MACT,SAAS,YAAY;AAAA,MAAK,SAAS,YAAY;AAAA,IACjD;AACA,WAAO,YAAY;AAAA,EACpB,CAAA,EAAE,KAAK,CAAC,GAAG,MAAM;AACV,UAAA,YAAY,kBAAkB,SAAS,SAAS,EAAE,YAAY,KAAK,EAAE,YAAY,GAAG;AACpF,UAAA,YAAY,kBAAkB,SAAS,SAAS,EAAE,YAAY,KAAK,EAAE,YAAY,GAAG;AAC1F,WAAO,YAAY;AAAA,EAAA,CACpB;AAED,MAAI,KAAK;AAAA,IACP,SAAS;AAAA,IACT,WAAW;AAAA,EAAA,CACZ;AACH;AAGA,SAAS,kBAAkB,MAAc,MAAc,MAAc,MAAsB;AACzF,QAAM,IAAI;AACV,QAAM,QAAQ,OAAO,QAAQ,KAAK,KAAK;AACvC,QAAM,QAAQ,OAAO,QAAQ,KAAK,KAAK;AACvC,QAAM,IACJ,KAAK,IAAI,OAAK,CAAC,IAAI,KAAK,IAAI,OAAK,CAAC,IAClC,KAAK,IAAI,OAAO,KAAK,KAAK,GAAG,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,GAAG,IAC9D,KAAK,IAAI,OAAK,CAAC,IAAI,KAAK,IAAI,OAAK,CAAC;AACpC,QAAM,IAAI,IAAI,KAAK,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,KAAK,IAAE,CAAC,CAAC;AACrD,SAAO,IAAI;AACb;ACtKO,SAAS,eAAe;AAC7B,QAAMA,OAAMC,iBAAQ;AAGhB,EAAAD,KAAA,IAAI,MAAM;AACV,EAAAA,KAAA,IAAIC,iBAAQ,MAAM;AACtB,EAAAD,KAAI,IAAIC,iBAAQ,WAAW,EAAE,UAAU,KAAA,CAAM,CAAC;AAG9C,EAAAD,KAAI,IAAI,aAAa,CAAC,MAAM,QAAQ;AAC5B,UAAA,OAAO,QAAQ,IAAI,gBAAgB;AACzC,QAAI,KAAK,EAAE,SAAS,KAAA,CAAM;AAAA,EAAA,CAC3B;AAEG,EAAAA,KAAA,IAAI,aAAa,UAAU;AAG3B,EAAAA,KAAA,IAAI,cAAc,QAAQ;AAC1B,EAAAA,KAAA,IAAI,uBAAuB,gBAAgB;AAC3C,EAAAA,KAAA,IAAI,kBAAkB,WAAW;AAGjC,EAAAA,KAAA,KAAK,yBAAyB,UAAU;AACxC,EAAAA,KAAA,KAAK,wBAAwB,SAAS;AACtC,EAAAA,KAAA,KAAK,mBAAmB,cAAc;AACtC,EAAAA,KAAA,KAAK,oBAAoB,cAAc;AACvC,EAAAA,KAAA,KAAK,2BAA2B,YAAY;AAC5C,EAAAA,KAAA,KAAK,+BAA+B,eAAe;AACnD,EAAAA,KAAA,KAAK,uBAAuB,QAAQ;AACpC,EAAAA,KAAA,KAAK,2BAA2B,WAAW;AAC3C,EAAAA,KAAA,IAAI,oBAAoB,UAAU;AAClC,EAAAA,KAAA,IAAI,6BAA6B,cAAc;AAC/C,EAAAA,KAAA,IAAI,mBAAmB,WAAW;AAClC,EAAAA,KAAA,IAAI,qBAAqB,cAAc;AACvC,EAAAA,KAAA,IAAI,qBAAqB,aAAa;AAGtC,EAAAA,KAAA,KAAK,iBAAiB,aAAa;AACnC,EAAAA,KAAA,IAAI,iBAAiB,eAAe;AACpC,EAAAA,KAAA,IAAI,qBAAqB,cAAc;AACvC,EAAAA,KAAA,OAAO,qBAAqB,aAAa;AAGzC,EAAAA,KAAA,KAAK,iBAAiB,cAAc;AAGpC,EAAAA,KAAA,IAAI,iBAAiB,UAAU;AAC/B,EAAAA,KAAA,IAAI,2BAA2B,eAAe;AAC9C,EAAAA,KAAA,IAAI,mBAAmB,qBAAqB;AAGhD,EAAAA,KAAI,KAAK,gBAAgB,CAAC,KAAK,QAAQ;AAC/B,UAAA,EAAE,MAAM,OAAO,OAAO,SAAS,UAAU,YAAY,IAAI;AAE3D,QAAA,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS;AACxD,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,SAAS;AAAA,QACT,SAAS;AAAA,MAAA,CACV;AAAA,IAAA;AAIK,YAAA,IAAI,4BAA4B,EAAE,MAAM,OAAO,OAAO,SAAS,UAAU,SAAS;AAE1F,QAAI,KAAK;AAAA,MACP,SAAS;AAAA,MACT,SAAS;AAAA,IAAA,CACV;AAAA,EAAA,CACF;AAEM,SAAAA;AACT;AClFA,MAAM,MAAM,aAAa;AACzB,MAAM,OAAO,QAAQ,IAAI,QAAQ;AAGjC,MAAM,YAAY,YAAY;AAC9B,MAAM,WAAW,KAAK,KAAK,WAAW,QAAQ;AAG9C,IAAI,IAAI,QAAQ,OAAO,QAAQ,CAAC;AAGhC,IAAI,IAAI,KAAK,CAAC,KAAK,QAAQ;AAErB,MAAA,IAAI,KAAK,WAAW,OAAO,KAAK,IAAI,KAAK,WAAW,SAAS,GAAG;AAC3D,WAAA,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,0BAA0B;AAAA,EAAA;AAGjE,MAAI,SAAS,KAAK,KAAK,UAAU,YAAY,CAAC;AAChD,CAAC;AAED,IAAI,OAAO,MAAM,MAAM;AACb,UAAA,IAAI,4CAA4C,IAAI,EAAE;AACtD,UAAA,IAAI,iCAAiC,IAAI,EAAE;AAC3C,UAAA,IAAI,4BAA4B,IAAI,MAAM;AACpD,CAAC;AAGD,QAAQ,GAAG,WAAW,MAAM;AAC1B,UAAQ,IAAI,+CAA+C;AAC3D,UAAQ,KAAK,CAAC;AAChB,CAAC;AAED,QAAQ,GAAG,UAAU,MAAM;AACzB,UAAQ,IAAI,8CAA8C;AAC1D,UAAQ,KAAK,CAAC;AAChB,CAAC;"}